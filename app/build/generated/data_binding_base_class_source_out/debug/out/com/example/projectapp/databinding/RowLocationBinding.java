// Generated by view binder compiler. Do not edit!
package com.example.projectapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.projectapp.R;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RowLocationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextInputEditText breakpoint;

  @NonNull
  public final ConstraintLayout constraintLayout2;

  @NonNull
  public final ImageButton locationRowBtn2;

  @NonNull
  public final TextView rwgwrgwgwrgw;

  private RowLocationBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextInputEditText breakpoint, @NonNull ConstraintLayout constraintLayout2,
      @NonNull ImageButton locationRowBtn2, @NonNull TextView rwgwrgwgwrgw) {
    this.rootView = rootView;
    this.breakpoint = breakpoint;
    this.constraintLayout2 = constraintLayout2;
    this.locationRowBtn2 = locationRowBtn2;
    this.rwgwrgwgwrgw = rwgwrgwgwrgw;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowLocationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowLocationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_location, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowLocationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.breakpoint;
      TextInputEditText breakpoint = rootView.findViewById(id);
      if (breakpoint == null) {
        break missingId;
      }

      id = R.id.constraintLayout2;
      ConstraintLayout constraintLayout2 = rootView.findViewById(id);
      if (constraintLayout2 == null) {
        break missingId;
      }

      id = R.id.locationRowBtn2;
      ImageButton locationRowBtn2 = rootView.findViewById(id);
      if (locationRowBtn2 == null) {
        break missingId;
      }

      id = R.id.rwgwrgwgwrgw;
      TextView rwgwrgwgwrgw = rootView.findViewById(id);
      if (rwgwrgwgwrgw == null) {
        break missingId;
      }

      return new RowLocationBinding((ConstraintLayout) rootView, breakpoint, constraintLayout2,
          locationRowBtn2, rwgwrgwgwrgw);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
